import subprocess
import time
from tqdm import tqdm
import sys

PIPELINES = [
    {"name": "1Ô∏è‚É£ ETL Indices majeurs (S&P500, CAC40, Nikkei)", "script": "etl_pipeline.py", "steps": 14},
    {"name": "2Ô∏è‚É£ Enrichissement Small Caps (filtres suppl√©mentaires)", "script": "enrich_etl.py", "steps": 2},
    {"name": "3Ô∏è‚É£ Fusion finale des donn√©es", "script": "merge_uniform.py", "steps": 2},

    {"name": "4Ô∏è‚É£ Analyse & Clustering", "script": "analysis_pipeline.py", "steps": 5},
    {"name": "5Ô∏è‚É£ Sentiment - News", "script": "enrich_sentiment_news.py", "steps": 3},
    {"name": "6Ô∏è‚É£ Sentiment - Social", "script": "enrich_sentiment_social.py", "steps": 3},

    {"name": "7Ô∏è‚É£ G√©n√©ration Insights", "script": "generate_insights.py", "steps": 3},
    {"name": "8Ô∏è‚É£ Fiches descriptives enrichies", "script": "enrich_insights.py", "steps": 4},
    {"name": "9Ô∏è‚É£ Donn√©es Overview G√©n√©rales", "script": "generate_overview_data.py", "steps": 5},
    {"name": "üîü Donn√©es Boursi√®res Indices", "script": "index_data.py", "steps": 3},
    {"name": "1Ô∏è‚É£1Ô∏è‚É£ R√©sum√© March√©s (GPT)", "script": "generate_overview_summary.py", "steps": 2}
]


def run_pipeline_with_progress(pipeline):
    name = pipeline["name"]
    script = pipeline["script"]
    steps = pipeline["steps"]
    step_percent = 100 // steps

    print(f"\nüîß D√©marrage de : {name}")
    progress_bar = tqdm(total=100, desc=name, bar_format="{l_bar}{bar}| {n_fmt}%", ncols=100)

    process = subprocess.Popen(
        ["python", script],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        bufsize=1,
        universal_newlines=True
    )

    progress = 0
    for line in process.stdout:
        sys.stdout.write(line)
        sys.stdout.flush()
        if any(kw in line.lower() for kw in [
            "√©tape", "step", "extraction", "nettoyage", "short", "midterm", "shortterm",
            "r√©sum√©", "visualisation", "enrich", "fiche", "json"
        ]):
            progress = min(progress + step_percent, 100)
            progress_bar.n = progress
            progress_bar.refresh()

    process.stdout.close()
    returncode = process.wait()
    progress_bar.n = 100
    progress_bar.refresh()
    progress_bar.close()

    if returncode == 0:
        print(f"‚úÖ {name} termin√© avec succ√®s.")
        return True
    else:
        print(f"‚ùå Erreur pendant l'ex√©cution de {name}. Code de retour : {returncode}")
        return False

def run_all_pipelines():
    print("\nüöÄ Lancement des pipelines de traitement complet...\n")
    for pipeline in PIPELINES:
        success = run_pipeline_with_progress(pipeline)
        if not success:
            print("‚õî Arr√™t du pipeline suite √† une erreur.")
            break
    else:
        print("\nüéØ Tous les pipelines ont √©t√© ex√©cut√©s avec succ√®s.")
